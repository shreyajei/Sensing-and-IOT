// Tutorial: https://randomnerdtutorials.com/esp32-mpu-6050-web-server/
#include <Arduino.h>
#include <WiFi.h>
#include <AsyncTCP.h>
#include <ESPAsyncWebServer.h>
#include <Adafruit_MPU6050.h>
#include <Adafruit_Sensor.h>
#include <Arduino_JSON.h>
#include "LittleFS.h"

// WiFi credentials
const char* ssid = "VM0735280_EXT";
const char* password = "4pwvqrkLgzfy";

// Web server setup
AsyncWebServer server(80);
AsyncEventSource events("/events");

// Json Variable to Hold Sensor Readings
JSONVar readings;

// MPU6050 variables
Adafruit_MPU6050 mpu;
sensors_event_t a, g, temp;

float gyroX = 0, gyroY = 0, gyroZ = 0;
float accX, accY, accZ;


// Gyroscope sensor deviation
float gyroXerror = 0.07;
float gyroYerror = 0.03;
float gyroZerror = 0.01;

// Sampling frequencies
#define SAMPLING_FREQ_GYRO_HZ    10
#define SAMPLING_FREQ_ACC_HZ     10


unsigned long gyroDelay = 100 / SAMPLING_FREQ_GYRO_HZ;
unsigned long accelerometerDelay = 100 / SAMPLING_FREQ_ACC_HZ;
unsigned long lastTimeGyro = 0;
unsigned long lastTimeAcc = 0;

// Flex sensor variables
const int flexPin = 33;  // Flex sensor connected to pin 33
const int ledPin = 5;    // LED connected to pin 5
const int flexThreshold = 2000; // Threshold for LED
int flexValue = 0;

// Initialize MPU6050
void initMPU() {
  if (!mpu.begin()) {
    Serial.println("Failed to find MPU6050 chip");
    while (1) { delay(10); }
  }
  Serial.println("MPU6050 Found!");
}

// Initialize LittleFS
void initLittleFS() {
  if (!LittleFS.begin()) {
    Serial.println("An error has occurred while mounting LittleFS");
    return;
  }
  Serial.println("LittleFS mounted successfully");
}

// Initialize WiFi
void initWiFi() {
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);
  Serial.print("Connecting to WiFi...");
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print(".");
    delay(1000);
  }
  Serial.println("\nConnected to WiFi");
  Serial.println(WiFi.localIP());
}

// Get gyro readings
String getGyroReadings() {
  mpu.getEvent(&a, &g, &temp);

  float gyroX_temp = g.gyro.x;
  if (abs(gyroX_temp) > gyroXerror) { gyroX += gyroX_temp / 50.00; }

  float gyroY_temp = g.gyro.y;
  if (abs(gyroY_temp) > gyroYerror) { gyroY += gyroY_temp / 70.00; }

  float gyroZ_temp = g.gyro.z;
  if (abs(gyroZ_temp) > gyroZerror) { gyroZ += gyroZ_temp / 90.00; }

  readings["gyroX"] = String(gyroX);
  readings["gyroY"] = String(gyroY);
  readings["gyroZ"] = String(gyroZ);

  return JSON.stringify(readings);
}

// Get accelerometer readings
String getAccReadings() {
  mpu.getEvent(&a, &g, &temp);
  accX = a.acceleration.x;
  accY = a.acceleration.y;
  accZ = a.acceleration.z;
  readings["accX"] = String(accX);
  readings["accY"] = String(accY);
  readings["accZ"] = String(accZ);
  return JSON.stringify(readings);
}



void setup() {
  Serial.begin(115200);

  // Initialize components
  initWiFi();
  initLittleFS();
  initMPU();

  // Flex sensor setup
  pinMode(flexPin, INPUT);
  pinMode(ledPin, OUTPUT);

  // Web server routes
  server.on("/", HTTP_GET, [](AsyncWebServerRequest *request) {
    request->send(LittleFS, "/index.html", "text/html");
  });

  server.serveStatic("/", LittleFS, "/");
  server.on("/reset", HTTP_GET, [](AsyncWebServerRequest *request) {
    gyroX = 0; gyroY = 0; gyroZ = 0;
    request->send(200, "text/plain", "OK");
  });

  events.onConnect([](AsyncEventSourceClient *client) {
    if (client->lastId()) {
      Serial.printf("Client reconnected! Last message ID: %u\n", client->lastId());
    }
    client->send("hello!", NULL, millis(), 10000);
  });
  server.addHandler(&events);
  server.begin();
}

void loop() {
  // Flex sensor reading and LED control
  flexValue = analogRead(flexPin);
  Serial.print("Flex Sensor: ");
  Serial.println(flexValue);

  // Send flex sensor value as an event
  events.send(String(flexValue).c_str(), "flex_sensor", millis());

  if (flexValue > flexThreshold) {
    digitalWrite(ledPin, HIGH);

    // Gyroscope readings
    if ((millis() - lastTimeGyro) > gyroDelay) {
      Serial.print("Gyro: ");
      Serial.println(getGyroReadings());
      events.send(getGyroReadings().c_str(), "gyro_readings", millis());
      lastTimeGyro = millis();
    }

    // Accelerometer readings
    if ((millis() - lastTimeAcc) > accelerometerDelay) {
      Serial.print("Accelerometer: ");
      Serial.println(getAccReadings());
      events.send(getAccReadings().c_str(), "accelerometer_readings", millis());
      lastTimeAcc = millis();
    }
  } else {
    digitalWrite(ledPin, LOW);
  }

  

  delay(100); // Stabilise readings
}
